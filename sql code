CREATE DATABASE IF NOT EXISTS Inventory;
USE Inventory;
CREATE TABLE stores (
    store_id VARCHAR(10) PRIMARY KEY,
    region VARCHAR(50)
);
CREATE TABLE products (
    product_id VARCHAR(10) PRIMARY KEY,
    category VARCHAR(50)
);
CREATE TABLE inventory_transactions (
    date DATE,
    store_id VARCHAR(10),
    product_id VARCHAR(10),
    inventory_level INT,
    units_sold INT,
    units_ordered INT,
    demand_forecast FLOAT,
    price FLOAT,
    discount INT,
    weather_condition VARCHAR(20),
    holiday_promotion BOOLEAN,
    competitor_pricing FLOAT,
    seasonality VARCHAR(20),
    PRIMARY KEY (date, store_id, product_id),
    FOREIGN KEY (store_id) REFERENCES stores(store_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

 -- current stock level calculation  
SELECT
    store_id,
    product_id,
    MAX(date) AS latest_date,
    SUBSTRING_INDEX(GROUP_CONCAT(inventory_level ORDER BY date DESC), ',', 1) AS inventory_level
FROM inventory_transactions
GROUP BY store_id, product_id
ORDER BY store_id, product_id;

-- Low Inventory Detection 

SELECT
    store_id,
    product_id,
    MAX(date) AS latest_date,
    SUBSTRING_INDEX(GROUP_CONCAT(inventory_level ORDER BY date DESC), ',', 1) AS current_inventory,
    SUBSTRING_INDEX(GROUP_CONCAT(demand_forecast ORDER BY date DESC), ',', 1) AS latest_forecast
FROM inventory_transactions
GROUP BY store_id, product_id
HAVING current_inventory < latest_forecast
ORDER BY store_id, product_id;

--  Reorder Point Estimation
SELECT 
    store_id, product_id,
    AVG(units_sold) AS avg_daily_sales,
    MAX(units_sold) AS max_daily_sales,
    AVG(units_sold) * 2 AS reorder_point -- lead time ~2 days
FROM inventory_transactions
WHERE date >= CURDATE() - INTERVAL 30 DAY
GROUP BY store_id, product_id;

-- inventory turnoveer ratio 
SELECT 
    product_id,
    SUM(units_sold) / NULLIF(AVG(inventory_level), 0) AS inventory_turnover_ratio
FROM inventory_transactions
GROUP BY product_id;



-- Summary Report with KPIs

WITH
-- A. Stockout Rate
stockouts AS (
    SELECT 
        store_id, product_id,
        COUNT(*) AS total_days,
        SUM(CASE WHEN demand_forecast > inventory_level THEN 1 ELSE 0 END) AS stockout_days,
        ROUND(100.0 * SUM(CASE WHEN demand_forecast > inventory_level THEN 1 ELSE 0 END) / COUNT(*), 2) AS stockout_rate_percent
    FROM inventory_transactions
    GROUP BY store_id, product_id
),

-- B. Avg Inventory Age
inventory_age AS (
    SELECT 
        product_id,
        ROUND(AVG(inventory_level * 1.0 / NULLIF(units_sold, 0)), 2) AS avg_inventory_age_days
    FROM inventory_transactions
    GROUP BY product_id
),

-- C. Average Stock Level
avg_stock AS (
    SELECT 
        store_id, product_id,
        ROUND(AVG(inventory_level), 2) AS avg_stock_level
    FROM inventory_transactions
    GROUP BY store_id, product_id
),

-- D. Inventory Turnover
turnover AS (
    SELECT 
        product_id,
        SUM(units_sold) AS total_units_sold,
        ROUND(AVG(inventory_level), 2) AS avg_inventory,
        ROUND(SUM(units_sold) / NULLIF(AVG(inventory_level), 0), 2) AS inventory_turnover_ratio
    FROM inventory_transactions
    GROUP BY product_id
),

-- E. Reorder Point
reorder AS (
    SELECT 
        store_id, product_id,
        ROUND(AVG(units_sold), 2) AS avg_daily_sales,
        ROUND(AVG(units_sold) * 2, 2) AS reorder_point
    FROM inventory_transactions
    WHERE date >= CURDATE() - INTERVAL 30 DAY
    GROUP BY store_id, product_id
)

-- Final Join
SELECT 
    s.store_id, s.product_id,
    s.stockout_rate_percent,
    a.avg_inventory_age_days,
    avg.avg_stock_level,
    t.inventory_turnover_ratio,
    r.reorder_point
FROM stockouts s
LEFT JOIN inventory_age a ON s.product_id = a.product_id
LEFT JOIN avg_stock avg ON s.store_id = avg.store_id AND s.product_id = avg.product_id
LEFT JOIN turnover t ON s.product_id = t.product_id
LEFT JOIN reorder r ON s.store_id = r.store_id AND s.product_id = r.product_id;


-- database normalization

-- Useful for joins and lookups

CREATE INDEX idx_product_id ON inventory_transactions(product_id);
CREATE INDEX idx_store_id ON inventory_transactions(store_id);

-- Speed up time-based queries
CREATE INDEX idx_date ON inventory_transactions(date);

-- Speed up filters on stockouts or sales
CREATE INDEX idx_demand_vs_inventory ON inventory_transactions(demand_forecast, inventory_level);

--  Window Functions Example
WITH monthly_sales AS (
    SELECT 
        store_id, 
        product_id, 
        DATE_FORMAT(date, '%Y-%m-01') AS sales_month,
        SUM(units_sold) AS monthly_units_sold
    FROM inventory_transactions
    GROUP BY store_id, product_id, DATE_FORMAT(date, '%Y-%m-01')
)
SELECT 
    store_id,
    product_id,
    sales_month,
    monthly_units_sold,
    RANK() OVER (
        PARTITION BY store_id, sales_month
        ORDER BY monthly_units_sold DESC
    ) AS rank_in_store_month
FROM monthly_sales
ORDER BY store_id, sales_month, rank_in_store_month;

-- analytical outputs

-- 1. Identify Fast-Selling vs. Slow-Moving Products
 
SELECT 
    product_id,
    SUM(units_sold) AS total_sales
FROM inventory_transactions
GROUP BY product_id
ORDER BY total_sales DESC;

-- 2. Recommend Stock Adjustments to Reduce Holding Cost
SELECT 
    product_id,
    COUNT(*) AS days_tracked,
    SUM(CASE WHEN inventory_level > demand_forecast * 1.5 THEN 1 ELSE 0 END) AS overstock_days,
    SUM(CASE WHEN inventory_level < demand_forecast * 0.5 THEN 1 ELSE 0 END) AS stockout_days,
    ROUND(AVG(inventory_level), 2) AS avg_inventory,
    ROUND(AVG(demand_forecast), 2) AS avg_forecast
FROM inventory_transactions
GROUP BY product_id
ORDER BY stockout_days DESC;


-- 3.Supplier Performance Insights 

-- 4.Forecast demand trends based on seasonal/cyclical data
SELECT 
    p.category,
    DATE_FORMAT(it.date, '%Y-%m') AS month,
    
    CASE 
        WHEN MONTH(it.date) IN (12, 1, 2) THEN 'Winter'
        WHEN MONTH(it.date) IN (3, 4, 5, 6) THEN 'Summer'
        WHEN MONTH(it.date) IN (7, 8, 9) THEN 'Monsoon'
        WHEN MONTH(it.date) IN (10, 11) THEN 'Festive'
    END AS season,

    SUM(it.units_sold) AS total_units_sold,
    AVG(it.demand_forecast) AS avg_forecast
FROM inventory_transactions it
JOIN products p ON it.product_id = p.product_id
GROUP BY p.category, DATE_FORMAT(it.date, '%Y-%m'), season
ORDER BY p.category, month;

    
 




